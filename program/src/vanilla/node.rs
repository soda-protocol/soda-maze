use solana_program::{pubkey::Pubkey, account_info::{self, AccountInfo}, program_error::ProgramError};

use crate::{params::bn::Fr, bn::BigInteger256 as BigInteger, HEIGHT, state::StateWrapper};

/////////////////// Binary Merkle Tree //////////////////////////
///                         O                 ---------- root
///                  _____/   \_____       
///                 /               \
///                O                 O        ---------- Layer 2
///             __/ \__            __/\__ 
///            /       \          /      \
///           O         O        O        O   ---------- Layer 1
///          / \       / \      / \      / \
///         O   O     O   O    O   O    O   O ---------- Layer 0
///         0   1     2   3    4   5    6   7
///         |------------  index -----------|
/////////////////////////////////////////////////////////////////

pub const DEFAULT_ROOT_HASH: Fr =
    Fr::new(BigInteger::new([6904633607657702662, 3694115756873985381, 10257531701570203579, 1282041486191921121]));

const BLANK_NODE_HASH_MAP: &[Fr; HEIGHT] = &[
    Fr::new(BigInteger::new([0, 0, 0, 0])),
    Fr::new(BigInteger::new([4316403218598554694, 7026366660643036788, 3202054552173960111, 833781817075694658])),
    Fr::new(BigInteger::new([7651674736625726087, 13367131455973456443, 11398914766172565206, 3308250589751421042])),
    Fr::new(BigInteger::new([38567217946329200, 8687169685564261761, 10970246894685051557, 1237708563509240439])),
    Fr::new(BigInteger::new([13954741775656979777, 8963591900725855102, 16209358329514399595, 934339625991719756])),
    Fr::new(BigInteger::new([2788518702838843494, 1818565589855389616, 1228820123242314395, 3441005727872062894])),
    Fr::new(BigInteger::new([3696023303693244608, 14722995366463437555, 382169582313493014, 3224666465888217059])),
    Fr::new(BigInteger::new([11943193452632773336, 4288143219118899651, 3022521464225064041, 390308467716806906])),
    Fr::new(BigInteger::new([1089937330934819741, 15262084291207181891, 5853763758034164880, 194048807058379169])),
    Fr::new(BigInteger::new([13181443723150814170, 1963043304934601034, 18229048292903719176, 2021421789834098351])),
    Fr::new(BigInteger::new([10296994506894132627, 4885479274115887851, 15381625003462965485, 2443080399741697688])),
    Fr::new(BigInteger::new([11439337812251777439, 336606593535997475, 7255613625312823593, 1171200783907985227])),
    Fr::new(BigInteger::new([13452301333865166529, 14400878222492809447, 9897310185063945010, 2657730587457780961])),
    Fr::new(BigInteger::new([11737380638723201829, 2031340982700048981, 17497566226235776198, 2715935020327015660])),
    Fr::new(BigInteger::new([16022643024867829805, 7335462150905162538, 12754157332543630787, 2774565466542272420])),
    Fr::new(BigInteger::new([13658974896092609660, 10948328306980536049, 6216778827336765118, 18767941123404609])),
    Fr::new(BigInteger::new([2175023042744285073, 5819998863615615767, 13274498479053634604, 959694304132548791])),
    Fr::new(BigInteger::new([12080559227699503061, 2926715718410969537, 1423928350148778482, 3332275503853290699])),
    Fr::new(BigInteger::new([4439093210676495144, 7124527269006587840, 8794843702243568331, 1852580824864179334])),
    Fr::new(BigInteger::new([11458025758950108963, 11283178079294657213, 1964719616234522286, 1090114788160635766])),
    Fr::new(BigInteger::new([7650648646990338390, 4214873708190255920, 6187120038949906171, 186316819878472346])),
    Fr::new(BigInteger::new([10602775719087040246, 5670168962255981483, 1528880971356167850, 3131953226899908147])),
    Fr::new(BigInteger::new([18401122453270884680, 12782677246206867879, 14180960484616335279, 1133914426075961484])),
    Fr::new(BigInteger::new([11651621030845253503, 14827411002298503412, 9615843039144744595, 843221606259775947])),
    Fr::new(BigInteger::new([8300386274094917940, 18122306393499889848, 8339717621732251198, 324478961088687344])),
    Fr::new(BigInteger::new([6160239850312093263, 11272612907613183705, 17454976492344992034, 3079382730147440940])),
    Fr::new(BigInteger::new([11102620000423812822, 4165530223303944055, 8236417509854765914, 2226449963489169765])),
];

#[inline]
pub fn blank_node_hash(layer: usize) -> Fr {
    assert!(layer < HEIGHT);
    BLANK_NODE_HASH_MAP[layer]
}

#[inline]
pub fn gen_merkle_path_from_leaf_index(index: u64) -> Vec<(usize, u64)> {
    (0..HEIGHT).into_iter().map(|layer| (layer, index >> layer)).collect()
}

pub type TreeRoot = StateWrapper<Fr, 33>;
pub type TreeNode = StateWrapper<Fr, 33>;

pub fn get_tree_node_pda<'a>(
    pool: &'a Pubkey,
    layer: u8,
    index: u64,
    program_id: &Pubkey,
) -> (Pubkey, (&'a [u8], [u8; 1], [u8; 8], [u8; 1])) {
    let pool_ref = pool.as_ref();
    let layer_bytes = layer.to_le_bytes();
    let index_bytes = index.to_le_bytes();
    
    let (key, seed) = Pubkey::find_program_address(
        &[pool_ref, &layer_bytes, &index_bytes],
        program_id,
    );

    (key, (pool_ref, layer_bytes, index_bytes, [seed]))
}
